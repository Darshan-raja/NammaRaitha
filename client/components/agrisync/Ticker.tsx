import React, { useRef } from "react";
import { useSpeechSynthesis } from "@/hooks/useSpeechSynthesis";
import { useLanguage } from "@/context/LanguageContext";

const updates = [
  {
    icon: "ЁЯМ╛",
    en: "Wheat MSP up 5% this season",
    hi: "рдЗрд╕ рд╕реАрдЬрд╝рди рдореЗрдВ рдЧреЗрд╣реВрдВ MSP 5% рдмрдврд╝рд╛",
    kn: "р▓И р▓Лр▓др│Бр▓╡р▓┐р▓ир▓▓р│Нр▓▓р▓┐ р▓Чр│Лр▓зр▓┐ MSP 5% р▓Пр▓░р▓┐р▓Хр│Ж",
    ta: "роЗроирпНрод рокро░рпБро╡родрпНродро┐ро▓рпН роХрпЛродрпБроорпИ MSP 5% роЙропро░рпНро╡рпБ",
  },
  {
    icon: "ЁЯТз",
    en: "Irrigation alert: Save water, drip recommended",
    hi: "рд╕рд┐рдВрдЪрд╛рдИ рдЕрд▓рд░реНрдЯ: рдкрд╛рдиреА рдмрдЪрд╛рдПрдБ, рдбреНрд░рд┐рдк рд╕реБрдЭрд╛рдИ рдЬрд╛рддреА рд╣реИ",
    kn: "р▓ир│Ар▓░р▓╛р▓╡р▓░р▓┐ р▓Ор▓Ър│Нр▓Ър▓░р▓┐р▓Хр│Ж: р▓ир│Ар▓░р▓ир│Нр▓ир│Б р▓Йр▓│р▓┐р▓╕р▓┐, р▓бр│Нр▓░р▓┐р▓кр│Н р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Б",
    ta: "роирпАро░рпНрокрпНрокро╛роЪройроорпН роОроЪрпНроЪро░ро┐роХрпНроХрпИ: родрогрпНрогрпАро░рпН роЪрпЗрооро┐роХрпНроХро╡рпБроорпН, роЯро┐ро░ро┐рокрпН рокро░ро┐роирпНродрпБро░рпИ",
  },
  {
    icon: "тШБ",
    en: "Weather: Light rain expected tomorrow",
    hi: "рдореМрд╕рдо: рдХрд▓ рд╣рд▓реНрдХреА рдмрд╛рд░рд┐рд╢",
    kn: "р▓╣р▓╡р▓╛р▓ор▓╛р▓и: р▓ир▓╛я┐╜я┐╜я┐╜р│Ж р▓╕р│Нр▓╡р▓▓р│Нр▓к р▓ор▓│р│Ж р▓╕р▓╛р▓зр│Нр▓пр▓др│Ж",
    ta: "ро╡ро╛ройро┐ро▓рпИ: роиро╛ро│рпИ ро▓рпЗроЪро╛рой рооро┤рпИ",
  },
  {
    icon: "ЁЯРЫ",
    en: "Pest alert: Watch for fall armyworm",
    hi: "рдХреАрдЯ рдЕрд▓рд░реНрдЯ: рдлреЙрд▓ рдЖрд░реНрдореАрд╡рд░реНрдо рд╕реЗ рд╕рд╛рд╡рдзрд╛рди",
    kn: "р▓╣р│Бр▓│р│Б р▓Ор▓Ър│Нр▓Ър▓░р▓┐р▓Хр│Ж: р▓лр▓╛р▓▓р│Н р▓Жр▓░р│Нр▓ор▓┐р▓╡р│Лр▓░р│Нр▓ор│Н р▓Ьр▓╛р▓Чр│Нр▓░р▓др│Ж",
    ta: "рокрпВроЪрпНроЪро┐ роОроЪрпНроЪро░ро┐роХрпНроХрпИ: роГрокро╛ро▓рпН роЖро░рпНрооро┐ро╡рпЛро░рпНроорпИ роХро╡ройро┐роХрпНроХро╡рпБроорпН",
  },
];

export default function Ticker() {
  const { speak, supports } = useSpeechSynthesis({ rate: 0.95 });
  const { lang, t } = useLanguage();
  const trackRef = useRef<HTMLDivElement | null>(null);

  const readAll = () => {
    if (!supports) return;
    speak(t("voice_updates"));
    for (const u of updates)
      speak(`${u.icon} ${u[lang] || u.en}`, { lang: `${lang}-IN` as any });
  };

  return (
    <div className="w-full bg-white/80 border-b">
      <div className="max-w-7xl mx-auto px-4 py-2 flex items-center gap-3">
        <button
          onClick={readAll}
          aria-label="Read updates"
          className="rounded-full w-9 h-9 grid place-items-center text-white shadow"
          style={{ background: "linear-gradient(90deg,#00F0FF,#4CAF50)" }}
        >
          <svg
            width="18"
            height="18"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
          >
            <path d="M12 1 C9 1 9 4 9 6 v4 c0 2 0 5 3 5 s3-3 3-5 V6 c0-2 0-5-3-5" />
            <path d="M19 10 v2 a7 7 0 0 1-14 0 v-2" />
            <line x1="12" y1="19" x2="12" y2="23" />
          </svg>
        </button>
        <div
          className="relative overflow-hidden flex-1 group"
          onMouseEnter={() => {
            if (trackRef.current)
              trackRef.current.style.animationPlayState = "paused";
          }}
          onMouseLeave={() => {
            if (trackRef.current)
              trackRef.current.style.animationPlayState = "running";
          }}
        >
          <div
            ref={trackRef}
            className="whitespace-nowrap animate-ticker will-change-transform"
          >
            {updates.concat(updates).map((u, i) => (
              <span
                key={i}
                className="inline-flex items-center gap-2 mr-8 text-sm text-gray-800"
              >
                <span>{u.icon}</span>
                <span>{(u as any)[lang] || u.en}</span>
              </span>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
